{"ast":null,"code":"var _class;\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class TaskService {\n  constructor(http) {\n    this.http = http;\n  }\n  // calls via http client to the server for retrieving a task\n  getTask(empId) {\n    return this.http.get('/api/employees/' + empId + '/tasks');\n  }\n  // calls via http client to the server for adding a task\n  addTask(empId, task) {\n    return this.http.post('/api/employees/' + empId + '/tasks', {\n      task\n    });\n  }\n  // calls via http client to the server for updating a task\n  updateTask(empId, todo, done) {\n    return this.http.put('/api/employees/' + empId + '/tasks', {\n      todo,\n      done\n    });\n  }\n  // calls via http client to the server for deleting a task\n  deleteTask(empId, taskId) {\n    return this.http.delete('/api/employees/' + empId + '/tasks/' + taskId);\n  }\n}\n_class = TaskService;\n_class.ɵfac = function TaskService_Factory(t) {\n  return new (t || _class)(i0.ɵɵinject(i1.HttpClient));\n};\n_class.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: _class,\n  factory: _class.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"names":["TaskService","constructor","http","getTask","empId","get","addTask","task","post","updateTask","todo","done","put","deleteTask","taskId","delete","i0","ɵɵinject","i1","HttpClient","factory","ɵfac","providedIn"],"sources":["/Users/chrisgorham/Desktop/buwebdev/nodebucket/src/app/task-management/task.service.ts"],"sourcesContent":["/*\n======================================\n; Title: task.service.ts\n; Author: Chris Gorham\n; Date Created: 23 August 2023\n; Last Updated: 23 August 2023\n; Description: This code supports the Task Service\n; Sources Used: N/A\n;=====================================\n*/\n\n// imports\nimport { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Item } from './tasks/item.interface';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class TaskService {\n\n  constructor(private http: HttpClient) { }\n    \n    // calls via http client to the server for retrieving a task\n    getTask(empId: number) {\n      return this.http.get('/api/employees/' + empId + '/tasks')\n    }\n    // calls via http client to the server for adding a task\n    addTask(empId: number, task: Item) {\n      return this.http.post('/api/employees/' + empId + '/tasks', { task })\n    }\n\n    // calls via http client to the server for updating a task\n    updateTask(empId: number, todo: Item[], done: Item[]) {\n      return this.http.put('/api/employees/' + empId + '/tasks', {\n        todo,\n        done\n      })\n    }\n    \n    // calls via http client to the server for deleting a task\n    deleteTask(empId: number, taskId: string) {\n      return this.http.delete('/api/employees/' + empId + '/tasks/' + taskId)\n    }\n  }\n\n"],"mappings":";;;AAmBA,OAAM,MAAOA,WAAW;EAEtBC,YAAoBC,IAAgB;IAAhB,KAAAA,IAAI,GAAJA,IAAI;EAAgB;EAEtC;EACAC,OAAOA,CAACC,KAAa;IACnB,OAAO,IAAI,CAACF,IAAI,CAACG,GAAG,CAAC,iBAAiB,GAAGD,KAAK,GAAG,QAAQ,CAAC;EAC5D;EACA;EACAE,OAAOA,CAACF,KAAa,EAAEG,IAAU;IAC/B,OAAO,IAAI,CAACL,IAAI,CAACM,IAAI,CAAC,iBAAiB,GAAGJ,KAAK,GAAG,QAAQ,EAAE;MAAEG;IAAI,CAAE,CAAC;EACvE;EAEA;EACAE,UAAUA,CAACL,KAAa,EAAEM,IAAY,EAAEC,IAAY;IAClD,OAAO,IAAI,CAACT,IAAI,CAACU,GAAG,CAAC,iBAAiB,GAAGR,KAAK,GAAG,QAAQ,EAAE;MACzDM,IAAI;MACJC;KACD,CAAC;EACJ;EAEA;EACAE,UAAUA,CAACT,KAAa,EAAEU,MAAc;IACtC,OAAO,IAAI,CAACZ,IAAI,CAACa,MAAM,CAAC,iBAAiB,GAAGX,KAAK,GAAG,SAAS,GAAGU,MAAM,CAAC;EACzE;;SAxBSd,WAAW;;mBAAXA,MAAW,EAAAgB,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA;AAAA;;SAAXnB,MAAW;EAAAoB,OAAA,EAAXpB,MAAW,CAAAqB,IAAA;EAAAC,UAAA,EAFV;AAAM"},"metadata":{},"sourceType":"module","externalDependencies":[]}