{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nimport { Validators } from '@angular/forms';\nexport let SigninComponent = class SigninComponent {\n  constructor(fb, router, cookieService, secService, route) {\n    this.fb = fb;\n    this.router = router;\n    this.cookieService = cookieService;\n    this.secService = secService;\n    this.route = route;\n    this.isLoading = false;\n    this.signinForm = this.fb.group({\n      empId: [null, Validators.compose([Validators.required, Validators.pattern('^[0-9]*$')])]\n    });\n    this.sessionUser = {};\n    this.errorMessage = '';\n  }\n  signin() {\n    this.isLoading = true;\n    const empId = this.signinForm.controls['empId'].value;\n    if (!empId || isNaN(parseInt(empId, 10))) {\n      this.errorMessage = 'The employee ID you entered is invalid, please try again';\n      this.isLoading = false;\n      return;\n    }\n    this.secService.findEmployeeById(empId).subscribe({\n      next: employee => {\n        this.sessionUser = employee;\n        this.cookieService.set('session_user', empId, 1);\n        this.cookieService.set('session_name', `${employee.firstName} ${employee.lastName}`, 1);\n        const returnUrl = this.route.snapshot.queryParamMap.get('returnUrl') || '/';\n        this.isLoading = false;\n        this.router.navigate([returnUrl]);\n      },\n      error: err => {\n        this.isLoading = false;\n        if (err.error.message) {\n          this.errorMessage = err.error.message;\n          return;\n        }\n      }\n    });\n  }\n};\nSigninComponent = __decorate([Component({\n  selector: 'app-signin',\n  templateUrl: './signin.component.html',\n  styleUrls: ['./signin.component.css']\n})], SigninComponent);","map":{"version":3,"names":["Component","Validators","SigninComponent","constructor","fb","router","cookieService","secService","route","isLoading","signinForm","group","empId","compose","required","pattern","sessionUser","errorMessage","signin","controls","value","isNaN","parseInt","findEmployeeById","subscribe","next","employee","set","firstName","lastName","returnUrl","snapshot","queryParamMap","get","navigate","error","err","message","__decorate","selector","templateUrl","styleUrls"],"sources":["/Users/chrisgorham/Desktop/buwebdev/nodebucket/src/app/security/signin/signin.component.ts"],"sourcesContent":["import { Component } from '@angular/core';\nimport { FormBuilder, Validators } from '@angular/forms';\nimport { ActivatedRoute } from '@angular/router';\nimport { Router } from '@angular/router';\nimport { CookieService } from 'ngx-cookie-service';\nimport { SecurityService } from '../security.service';\n\n\nexport interface SessionUser {\n  empId: number;\n  firstName: string;\n  lastName: string;\n}\n\n@Component({\n  selector: 'app-signin',\n  templateUrl: './signin.component.html',\n  styleUrls: ['./signin.component.css']\n})\nexport class SigninComponent {\n  errorMessage: string\n  sessionUser: SessionUser\n  isLoading: boolean = false\n\n  signinForm = this.fb.group({\n    empId: [null, Validators.compose([Validators.required, Validators.pattern('^[0-9]*$')])]\n  })\n\n  constructor(private fb: FormBuilder, private router: Router, private cookieService: CookieService, private secService: SecurityService, private route: ActivatedRoute) {\n\n    this.sessionUser = {} as SessionUser\n    this.errorMessage = ''\n  }\n\n  signin() {\n    this.isLoading = true;\n    const empId = this.signinForm.controls['empId'].value\n\n    if (!empId || isNaN(parseInt(empId, 10))) {\n      this.errorMessage = 'The employee ID you entered is invalid, please try again'\n      this.isLoading = false\n      return\n    }\n\n    this.secService.findEmployeeById(empId).subscribe({\n      next: (employee: any) => {\n        this.sessionUser = employee\n        this.cookieService.set('session_user', empId, 1)\n        this.cookieService.set('session_name', `${employee.firstName} ${employee.lastName}`, 1)\n        const returnUrl = this.route.snapshot.queryParamMap.get('returnUrl') || '/'\n\n        this.isLoading = false;\n        this.router.navigate([returnUrl])\n      },\n      error: (err) => {\n        this.isLoading = false\n        if (err.error.message) {\n          this.errorMessage = err.error.message\n          return\n        }\n      }\n    })\n  }\n\n}\n"],"mappings":";AAAA,SAASA,SAAS,QAAQ,eAAe;AACzC,SAAsBC,UAAU,QAAQ,gBAAgB;AAkBjD,WAAMC,eAAe,GAArB,MAAMA,eAAe;EAS1BC,YAAoBC,EAAe,EAAUC,MAAc,EAAUC,aAA4B,EAAUC,UAA2B,EAAUC,KAAqB;IAAjJ,KAAAJ,EAAE,GAAFA,EAAE;IAAuB,KAAAC,MAAM,GAANA,MAAM;IAAkB,KAAAC,aAAa,GAAbA,aAAa;IAAyB,KAAAC,UAAU,GAAVA,UAAU;IAA2B,KAAAC,KAAK,GAALA,KAAK;IANrJ,KAAAC,SAAS,GAAY,KAAK;IAE1B,KAAAC,UAAU,GAAG,IAAI,CAACN,EAAE,CAACO,KAAK,CAAC;MACzBC,KAAK,EAAE,CAAC,IAAI,EAAEX,UAAU,CAACY,OAAO,CAAC,CAACZ,UAAU,CAACa,QAAQ,EAAEb,UAAU,CAACc,OAAO,CAAC,UAAU,CAAC,CAAC,CAAC;KACxF,CAAC;IAIA,IAAI,CAACC,WAAW,GAAG,EAAiB;IACpC,IAAI,CAACC,YAAY,GAAG,EAAE;EACxB;EAEAC,MAAMA,CAAA;IACJ,IAAI,CAACT,SAAS,GAAG,IAAI;IACrB,MAAMG,KAAK,GAAG,IAAI,CAACF,UAAU,CAACS,QAAQ,CAAC,OAAO,CAAC,CAACC,KAAK;IAErD,IAAI,CAACR,KAAK,IAAIS,KAAK,CAACC,QAAQ,CAACV,KAAK,EAAE,EAAE,CAAC,CAAC,EAAE;MACxC,IAAI,CAACK,YAAY,GAAG,0DAA0D;MAC9E,IAAI,CAACR,SAAS,GAAG,KAAK;MACtB;;IAGF,IAAI,CAACF,UAAU,CAACgB,gBAAgB,CAACX,KAAK,CAAC,CAACY,SAAS,CAAC;MAChDC,IAAI,EAAGC,QAAa,IAAI;QACtB,IAAI,CAACV,WAAW,GAAGU,QAAQ;QAC3B,IAAI,CAACpB,aAAa,CAACqB,GAAG,CAAC,cAAc,EAAEf,KAAK,EAAE,CAAC,CAAC;QAChD,IAAI,CAACN,aAAa,CAACqB,GAAG,CAAC,cAAc,EAAE,GAAGD,QAAQ,CAACE,SAAS,IAAIF,QAAQ,CAACG,QAAQ,EAAE,EAAE,CAAC,CAAC;QACvF,MAAMC,SAAS,GAAG,IAAI,CAACtB,KAAK,CAACuB,QAAQ,CAACC,aAAa,CAACC,GAAG,CAAC,WAAW,CAAC,IAAI,GAAG;QAE3E,IAAI,CAACxB,SAAS,GAAG,KAAK;QACtB,IAAI,CAACJ,MAAM,CAAC6B,QAAQ,CAAC,CAACJ,SAAS,CAAC,CAAC;MACnC,CAAC;MACDK,KAAK,EAAGC,GAAG,IAAI;QACb,IAAI,CAAC3B,SAAS,GAAG,KAAK;QACtB,IAAI2B,GAAG,CAACD,KAAK,CAACE,OAAO,EAAE;UACrB,IAAI,CAACpB,YAAY,GAAGmB,GAAG,CAACD,KAAK,CAACE,OAAO;UACrC;;MAEJ;KACD,CAAC;EACJ;CAED;AA7CYnC,eAAe,GAAAoC,UAAA,EAL3BtC,SAAS,CAAC;EACTuC,QAAQ,EAAE,YAAY;EACtBC,WAAW,EAAE,yBAAyB;EACtCC,SAAS,EAAE,CAAC,wBAAwB;CACrC,CAAC,C,EACWvC,eAAe,CA6C3B"},"metadata":{},"sourceType":"module","externalDependencies":[]}