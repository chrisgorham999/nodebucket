{"ast":null,"code":"import { Validators } from '@angular/forms';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"ngx-cookie-service\";\nimport * as i2 from \"../task.service\";\nimport * as i3 from \"@angular/forms\";\nimport * as i4 from \"@angular/common\";\nfunction TasksComponent_div_5_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\")(1, \"div\", 26);\n    i0.ɵɵtext(2);\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate1(\" \", ctx_r0.errorMessage, \" \");\n  }\n}\nfunction TasksComponent_div_6_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\")(1, \"div\", 27);\n    i0.ɵɵtext(2);\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate1(\" \", ctx_r1.successMessage, \" \");\n  }\n}\nfunction TasksComponent_div_31_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\")(1, \"div\", 28);\n    i0.ɵɵtext(2, \"Please enter a task! \");\n    i0.ɵɵelement(3, \"button\", 29);\n    i0.ɵɵelementEnd()();\n  }\n}\nfunction TasksComponent_div_32_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\")(1, \"div\", 28);\n    i0.ɵɵtext(2, \"The task field must be at least 3 characters long! \");\n    i0.ɵɵelement(3, \"button\", 29);\n    i0.ɵɵelementEnd()();\n  }\n}\nfunction TasksComponent_div_33_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\")(1, \"div\", 28);\n    i0.ɵɵtext(2, \"The task field must be at most 50 characters long! \");\n    i0.ɵɵelement(3, \"button\", 29);\n    i0.ɵɵelementEnd()();\n  }\n}\nfunction TasksComponent_div_40_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\")(1, \"div\", 30);\n    i0.ɵɵtext(2, \" No tasks to do yet! \");\n    i0.ɵɵelementEnd()();\n  }\n}\nconst _c0 = function (a0) {\n  return {\n    \"background-color\": a0\n  };\n};\nfunction TasksComponent_div_41_button_4_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"button\", 35);\n  }\n  if (rf & 2) {\n    const item_r9 = i0.ɵɵnextContext().$implicit;\n    i0.ɵɵpropertyInterpolate(\"title\", item_r9.category.categoryName);\n    i0.ɵɵproperty(\"ngStyle\", i0.ɵɵpureFunction1(2, _c0, item_r9.category.backgroundColor));\n  }\n}\nfunction TasksComponent_div_41_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 19)(1, \"div\", 31)(2, \"div\", 32)(3, \"div\", 33);\n    i0.ɵɵtemplate(4, TasksComponent_div_41_button_4_Template, 1, 4, \"button\", 34);\n    i0.ɵɵelementStart(5, \"div\");\n    i0.ɵɵtext(6);\n    i0.ɵɵelementEnd()()()()();\n  }\n  if (rf & 2) {\n    const item_r9 = ctx.$implicit;\n    i0.ɵɵadvance(4);\n    i0.ɵɵproperty(\"ngIf\", item_r9.category.categoryName != \"other\");\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate1(\" \", item_r9.text, \" \");\n  }\n}\nfunction TasksComponent_div_47_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\")(1, \"div\", 30);\n    i0.ɵɵtext(2, \" No tasks done yet! \");\n    i0.ɵɵelementEnd()();\n  }\n}\nfunction TasksComponent_div_48_button_4_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"button\", 35);\n  }\n  if (rf & 2) {\n    const item_r12 = i0.ɵɵnextContext().$implicit;\n    i0.ɵɵpropertyInterpolate(\"title\", item_r12.category.categoryName);\n    i0.ɵɵproperty(\"ngStyle\", i0.ɵɵpureFunction1(2, _c0, item_r12.category.backgroundColor));\n  }\n}\nfunction TasksComponent_div_48_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 19)(1, \"div\", 36)(2, \"div\", 32)(3, \"div\", 33);\n    i0.ɵɵtemplate(4, TasksComponent_div_48_button_4_Template, 1, 4, \"button\", 34);\n    i0.ɵɵelementStart(5, \"div\");\n    i0.ɵɵtext(6);\n    i0.ɵɵelementEnd()()()()();\n  }\n  if (rf & 2) {\n    const item_r12 = ctx.$implicit;\n    i0.ɵɵadvance(4);\n    i0.ɵɵproperty(\"ngIf\", item_r12.category.categoryName != \"other\");\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate1(\" \", item_r12.text, \" \");\n  }\n}\nexport let TasksComponent = /*#__PURE__*/(() => {\n  var _class;\n  class TasksComponent {\n    constructor(cookieService, taskService, fb) {\n      this.cookieService = cookieService;\n      this.taskService = taskService;\n      this.fb = fb;\n      // form validators\n      this.newTaskForm = this.fb.group({\n        text: [null, Validators.compose([Validators.required, Validators.minLength(3), Validators.maxLength(50)])],\n        category: [null]\n      });\n      // setup variables\n      this.employee = {};\n      this.todo = [];\n      this.done = [];\n      this.errorMessage = '';\n      this.successMessage = '';\n      // parse number from the user empId entry\n      this.empId = parseInt(this.cookieService.get('session_user'), 10);\n      // calls the get task function to load when the page loads\n      this.taskService.getTask(this.empId).subscribe({\n        next: emp => {\n          console.log('emp', emp);\n          this.employee = emp;\n        },\n        error: err => {\n          console.log('error', err);\n          this.errorMessage = err.message;\n        },\n        complete: () => {\n          console.log('complete');\n          this.todo = this.employee.todo ? this.employee.todo : [];\n          this.done = this.employee.done ? this.employee.done : [];\n          // console log for troubleshooting purposes\n          console.log('todo', this.todo);\n          console.log('done', this.done);\n        }\n      });\n    }\n    // the function to add a task\n    addTask() {\n      // define variables and pull data from the form\n      const text = this.newTaskForm.controls['text'].value;\n      const category = this.newTaskForm.controls['category'].value;\n      // if there isn't a category, set the error message accordingly\n      if (!category) {\n        this.errorMessage = 'Please provide a category';\n        this.hideAlert();\n        return;\n      }\n      let newTask = this.getTask(text, category);\n      // calls to the task service to add a task\n      this.taskService.addTask(this.empId, newTask).subscribe({\n        next: task => {\n          console.log('Task added with id', task.id);\n          newTask._id = task.id; // set the new task\n          this.todo.push(newTask); // pushes task to the todo array\n          this.newTaskForm.reset();\n          this.successMessage = 'Task added successfully';\n          this.hideAlert();\n        },\n        error: err => {\n          this.errorMessage = err.message;\n          this.hideAlert();\n        }\n      });\n    }\n    // disappears the alert after 3 seconds by resetting the message to empty\n    hideAlert() {\n      setTimeout(() => {\n        this.errorMessage = '';\n        this.successMessage = '';\n      }, 3000);\n    }\n    // the get task function\n    getTask(text, categoryName) {\n      let task = {};\n      // define colors\n      const white = '#FFFFFF';\n      const green = '#1a472a';\n      const grey = '#5d5d5d';\n      const black = '#000000';\n      // switch that sets the category button background color depending on the category selected\n      switch (categoryName) {\n        case 'testing':\n          task = {\n            text: text,\n            category: {\n              categoryName: categoryName,\n              backgroundColor: green\n            }\n          };\n          return task;\n        case 'meetings':\n          task = {\n            text: text,\n            category: {\n              categoryName: categoryName,\n              backgroundColor: grey\n            }\n          };\n          return task;\n        case 'projects':\n          task = {\n            text: text,\n            category: {\n              categoryName: categoryName,\n              backgroundColor: black\n            }\n          };\n          return task;\n        default:\n          task = {\n            text: text,\n            category: {\n              categoryName: categoryName,\n              backgroundColor: white\n            }\n          };\n          return task;\n      }\n    }\n  }\n  _class = TasksComponent;\n  _class.ɵfac = function TasksComponent_Factory(t) {\n    return new (t || _class)(i0.ɵɵdirectiveInject(i1.CookieService), i0.ɵɵdirectiveInject(i2.TaskService), i0.ɵɵdirectiveInject(i3.FormBuilder));\n  };\n  _class.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: _class,\n    selectors: [[\"app-tasks\"]],\n    decls: 49,\n    vars: 11,\n    consts: [[1, \"container-fluid\", \"pt-2\", 2, \"min-height\", \"600px\"], [1, \"font-yellow\", \"text-center\"], [1, \"row\", \"justify-content-center\", \"p4\"], [1, \"col-sm-10\", \"col-md-8\", \"col-lg-6\"], [4, \"ngIf\"], [1, \"row\", \"justify-content-center\", \"pt-4\"], [3, \"formGroup\", \"ngSubmit\"], [1, \"input-group\", \"mb-3\"], [\"type\", \"text\", \"formControlName\", \"text\", \"placeholder\", \"Add a new task\", \"aria-label\", \"Add a new task\", \"aria-describedby\", \"btnAdd\", 1, \"form-control\", \"bg-slytherin3\", \"font-yellow\"], [\"type\", \"submit\", \"id\", \"btnAdd\", 1, \"btn\", \"btn-outline-secondary\", \"font-yellow\", 3, \"disabled\"], [1, \"form-check\", \"form-check-inline\"], [\"type\", \"radio\", \"formControlName\", \"category\", \"name\", \"category\", \"id\", \"testingRadio\", \"value\", \"testing\", 1, \"form-check-input\"], [\"for\", \"testingRadio\", 1, \"form-check-label\", \"font-yellow\"], [\"type\", \"radio\", \"formControlName\", \"category\", \"name\", \"category\", \"id\", \"meetingsRadio\", \"value\", \"meetings\", 1, \"form-check-input\"], [\"for\", \"meetingsRadio\", 1, \"form-check-label\", \"font-yellow\"], [\"type\", \"radio\", \"formControlName\", \"category\", \"name\", \"category\", \"id\", \"projectsRadio\", \"value\", \"projects\", 1, \"form-check-input\"], [\"for\", \"projectsRadio\", 1, \"font-yellow\", \"form-check-label\"], [\"type\", \"radio\", \"formControlName\", \"category\", \"name\", \"category\", \"id\", \"otherRadio\", \"value\", \"other\", 1, \"form-check-input\"], [\"for\", \"otherRadio\", 1, \"form-check-label\", \"font-yellow\"], [1, \"mt-2\"], [1, \"row\", \"gy-3\", \"mt-2\", \"justify-content-center\"], [1, \"col-sm-5\", \"col-md-4\", \"col-lg-3\"], [1, \"text-center\", \"font-yellow\"], [1, \"p-3\", \"border\", \"bg-slytherin2\"], [1, \"container\"], [\"class\", \"mt-2\", 4, \"ngFor\", \"ngForOf\"], [\"role\", \"alert\", 1, \"alert\", \"alert-danger\"], [\"role\", \"alert\", 1, \"alert\", \"alert-success\"], [\"role\", \"alert\", 1, \"alert\", \"alert-danger\", \"alert-dismissable\", \"fade\", \"show\"], [\"type\", \"button\", \"data-bs-dismiss\", \"alert\", \"aria-label\", \"Close\", 1, \"btn-close\"], [1, \"alert\", \"yellow-border\", \"bg-slytherin\", \"font-yellow\"], [1, \"row\", \"border\", \"bg-slytherin3\"], [1, \"col-sm-6\"], [1, \"card-body\"], [\"data-bs-toggle\", \"tooltip\", \"style\", \"width: 25%\", \"class\", \"btn\", 3, \"ngStyle\", \"title\", 4, \"ngIf\"], [\"data-bs-toggle\", \"tooltip\", 1, \"btn\", 2, \"width\", \"25%\", 3, \"ngStyle\", \"title\"], [1, \"row\", \"border\", \"bg-white\"]],\n    template: function TasksComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"div\", 0)(1, \"h1\", 1);\n        i0.ɵɵtext(2, \"My Tasks\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(3, \"div\", 2)(4, \"div\", 3);\n        i0.ɵɵtemplate(5, TasksComponent_div_5_Template, 3, 1, \"div\", 4);\n        i0.ɵɵtemplate(6, TasksComponent_div_6_Template, 3, 1, \"div\", 4);\n        i0.ɵɵelementEnd()();\n        i0.ɵɵelementStart(7, \"div\", 5)(8, \"div\", 3)(9, \"form\", 6);\n        i0.ɵɵlistener(\"ngSubmit\", function TasksComponent_Template_form_ngSubmit_9_listener() {\n          return ctx.addTask();\n        });\n        i0.ɵɵelementStart(10, \"div\", 7);\n        i0.ɵɵelement(11, \"input\", 8);\n        i0.ɵɵelementStart(12, \"button\", 9);\n        i0.ɵɵtext(13, \"Add\");\n        i0.ɵɵelementEnd()();\n        i0.ɵɵelementStart(14, \"div\", 10);\n        i0.ɵɵelement(15, \"input\", 11);\n        i0.ɵɵelementStart(16, \"label\", 12);\n        i0.ɵɵtext(17, \"Testing\");\n        i0.ɵɵelementEnd()();\n        i0.ɵɵelementStart(18, \"div\", 10);\n        i0.ɵɵelement(19, \"input\", 13);\n        i0.ɵɵelementStart(20, \"label\", 14);\n        i0.ɵɵtext(21, \"Meetings\");\n        i0.ɵɵelementEnd()();\n        i0.ɵɵelementStart(22, \"div\", 10);\n        i0.ɵɵelement(23, \"input\", 15);\n        i0.ɵɵelementStart(24, \"label\", 16);\n        i0.ɵɵtext(25, \"Projects\");\n        i0.ɵɵelementEnd()();\n        i0.ɵɵelementStart(26, \"div\", 10);\n        i0.ɵɵelement(27, \"input\", 17);\n        i0.ɵɵelementStart(28, \"label\", 18);\n        i0.ɵɵtext(29, \"Other\");\n        i0.ɵɵelementEnd()();\n        i0.ɵɵelementStart(30, \"div\", 19);\n        i0.ɵɵtemplate(31, TasksComponent_div_31_Template, 4, 0, \"div\", 4);\n        i0.ɵɵtemplate(32, TasksComponent_div_32_Template, 4, 0, \"div\", 4);\n        i0.ɵɵtemplate(33, TasksComponent_div_33_Template, 4, 0, \"div\", 4);\n        i0.ɵɵelementEnd()()()();\n        i0.ɵɵelementStart(34, \"div\", 20)(35, \"div\", 21)(36, \"h4\", 22);\n        i0.ɵɵtext(37, \"ToDo\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(38, \"div\", 23)(39, \"div\", 24);\n        i0.ɵɵtemplate(40, TasksComponent_div_40_Template, 3, 0, \"div\", 4);\n        i0.ɵɵtemplate(41, TasksComponent_div_41_Template, 7, 2, \"div\", 25);\n        i0.ɵɵelementEnd()()();\n        i0.ɵɵelementStart(42, \"div\", 21)(43, \"h4\", 22);\n        i0.ɵɵtext(44, \"Done\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(45, \"div\", 23)(46, \"div\", 24);\n        i0.ɵɵtemplate(47, TasksComponent_div_47_Template, 3, 0, \"div\", 4);\n        i0.ɵɵtemplate(48, TasksComponent_div_48_Template, 7, 2, \"div\", 25);\n        i0.ɵɵelementEnd()()()()();\n      }\n      if (rf & 2) {\n        i0.ɵɵadvance(5);\n        i0.ɵɵproperty(\"ngIf\", ctx.errorMessage);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", ctx.successMessage);\n        i0.ɵɵadvance(3);\n        i0.ɵɵproperty(\"formGroup\", ctx.newTaskForm);\n        i0.ɵɵadvance(3);\n        i0.ɵɵproperty(\"disabled\", !ctx.newTaskForm.valid);\n        i0.ɵɵadvance(19);\n        i0.ɵɵproperty(\"ngIf\", ctx.newTaskForm.controls[\"text\"].touched && ctx.newTaskForm.controls[\"text\"].hasError(\"required\"));\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", ctx.newTaskForm.controls[\"text\"].touched && ctx.newTaskForm.controls[\"text\"].hasError(\"minlength\"));\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", ctx.newTaskForm.controls[\"text\"].touched && ctx.newTaskForm.controls[\"text\"].hasError(\"maxlength\"));\n        i0.ɵɵadvance(7);\n        i0.ɵɵproperty(\"ngIf\", !ctx.todo || ctx.todo.length === 0);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngForOf\", ctx.todo);\n        i0.ɵɵadvance(6);\n        i0.ɵɵproperty(\"ngIf\", !ctx.done || ctx.done.length === 0);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngForOf\", ctx.done);\n      }\n    },\n    dependencies: [i4.NgForOf, i4.NgIf, i4.NgStyle, i3.ɵNgNoValidate, i3.DefaultValueAccessor, i3.RadioControlValueAccessor, i3.NgControlStatus, i3.NgControlStatusGroup, i3.FormGroupDirective, i3.FormControlName],\n    styles: [\".font-yellow[_ngcontent-%COMP%]{color:#ff0}.bg-slytherin[_ngcontent-%COMP%]{background-color:#2a623d}.bg-slytherin2[_ngcontent-%COMP%]{background-color:#5d5d5d}.bg-slytherin3[_ngcontent-%COMP%]{background-color:#aaa}.yellow-border[_ngcontent-%COMP%]{border-color:#ff0}\"]\n  });\n  return TasksComponent;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}